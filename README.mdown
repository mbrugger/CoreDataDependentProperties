CoreData - to-many relationships - observing
============================================

General implementation solving the problem of properties dependent on the properties of another entity in a to-many relationship


Note from [developer.apple.com]
-------------------------------
Important: 
Note that you cannot set up dependencies on to-many relationships. For example, suppose you have an Order object with a to-many relationship (orderItems) to a collection of OrderItem objects, and OrderItem objects have a price attribute. You might want the Order object have a totalPrice attribute that is dependent upon the prices of all the OrderItem objects in the relationship. You can not do this by implementing keyPathsForValuesAffectingValueForKey: and returning orderItems.price as the keypath for totalPrice. You must observe the price attribute of each of the OrderItem objects in the orderItems collection and respond to changes in their values by updating totalPrice yourself.

Sample
------
Demonstrated with an example modelling Customers and Invoices

[![](http://github.com/mbrugger/CoreDataDependentProperties/raw/master/Resources/images/sample_model.png)](http://github.com/mbrugger/CoreDataDependentProperties/raw/master/Resources/images/sample_model.png)

The total sum of a customer has to be calculated from all invoices
Undo&Redo is fully functional with this implementation.

The source is published under a BSD License, so feel free to use it wherever you want.

HOWTO use the stuff:
--------------------
1) Add LPManagedObjectContext, LPManagedObjectContextObservationInfo, LPManagedObject_ObservationInfo and LPManagedObject to your project

2) Exchange the current NSManagedObjectContext with a LPManagedObjectContext (LPAutomatedObserving_AppDelegate.m:113)
   after the CoreData stack is fully initialized send -(void) prepareDependentProperties; to the context

3) inherit each Class with dependent properties from LPManagedObject (Customer.m)
   implement the following two methods in each relevant class:

  +(NSArray*) keyPathsForValuesAffectingDerived<Key>
  -(void) updateDerived<Key>

Finished!

Inspired by the solution presented at macoun09 - CoreData session
http://macoun.de/?page_id=2266

[developer.apple.com]: http://developer.apple.com/mac/library/documentation/cocoa/conceptual/ModelObjects/Articles/moIntegrating.html
